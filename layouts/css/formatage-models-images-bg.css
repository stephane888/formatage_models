@charset "UTF-8";
/**
 * color de base
 */
/**/
/**/
/**
 * Typography
 */
/**
 * typography
 */
/**
 * Lists buttons
 */
/* */
/* page-header-bg */
/* Permet de surcharger les variables bootstrap */
/**
 * Chargement progressif
 */
/**
 * Affichage de la langue.
 * Model simple.
 */
/**
 *
 */
/**
 * Card rotation
 */
/**
* translation on hover
*/
/**
* Before cover
*/
/**
* Before cover
*/
/**
 *  pas de retour Ã  la ligne
 */
/**
 *  mixin for multiline limit text css
 */
/*!
 * .list-element{@include list-element(($paddingY:10px, $paddingX:5px, $borderW:1px));}
 */
/**
 *  Images area to preload,
 *  on ajoute sur la div contenant l'image
 */
/**
 *
 */
/**
 * Affet Ombre
 */
/**
 * Pricelist
 */
/**/
/* space */
/* color */
/* typography */
body,
html {
  font-size: 1.4rem;
  letter-spacing: normal;
  line-height: 1.3;
  color: #4c4c4c;
  margin: 0;
}

html {
  font-size: 62.5%;
  line-height: 1.5;
}

/**
  Elment de base pour le titre.
*/
.h1,
.h2,
.h3,
.h4,
.h5,
.h6,
h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: inherit;
  font-weight: 700;
  line-height: inherit;
  margin: 0;
  color: #727272;
}

h4 {
  font-size: 1.6rem;
  margin: 0 0 0.9090909091rem;
  line-height: 2rem;
}
@media only screen and (min-width: 992px) {
  h4 {
    font-size: 1.984rem;
  }
}

.seeMore {
  background: #fff;
  border: 2px solid #1b1918;
  border-radius: 2px;
  padding: 15px 20px;
  font-weight: 700;
  font-size: 12px;
  line-height: 14px;
  width: fit-content;
  margin: 50px auto 0;
  cursor: pointer;
}

.images-bg {
  color: #FFF;
  background-attachment: fixed;
  background-position: center;
}
.images-bg .seeMore {
  display: inline-block;
  color: inherit;
  background: transparent;
  border-color: #FFF;
}
.images-bg .titre {
  font-size: 3.4rem;
  line-height: 1.2;
  margin-bottom: 4rem;
}
@media only screen and (min-width: 992px) {
  .images-bg .titre {
    font-size: 6.8rem;
  }
}
.images-bg .sub_title {
  font-size: 1.6rem;
}
@media only screen and (min-width: 992px) {
  .images-bg .sub_title {
    font-size: 3.2rem;
  }
}
.images-bg .row {
  padding-top: 2rem;
  padding-bottom: 2rem;
}
@media only screen and (min-width: 992px) {
  .images-bg .row {
    padding-top: 4rem;
    padding-bottom: 4rem;
  }
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/